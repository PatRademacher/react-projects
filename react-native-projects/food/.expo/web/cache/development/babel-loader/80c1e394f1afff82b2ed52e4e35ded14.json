{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/patrickrademacher/REACT/react-native/Udemy/food/src/screens/ResultsShowScreen.js\";\n\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport yelp from \"../api/yelp\";\n\nvar ResultsShowScreen = function ResultsShowScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      result = _useState2[0],\n      setResult = _useState2[1];\n\n  var id = navigation.getParam('id');\n\n  var getResult = function getResult(id) {\n    var response;\n    return _regeneratorRuntime.async(function getResult$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(yelp.get(\"/\" + id));\n\n          case 2:\n            response = _context.sent;\n            setResult(response.data);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    getResult(id);\n  }, []);\n\n  if (!result) {\n    return null;\n  }\n\n  console.log(id);\n  return React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 12\n    }\n  }, React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, result.name), React.createElement(FlatList, {\n    data: result.photos,\n    keyExtractor: function keyExtractor(photo) {\n      return photo;\n    },\n    renderItem: {\n      item: item\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({});\nexport default ResultsShowScreen;","map":{"version":3,"sources":["/Users/patrickrademacher/REACT/react-native/Udemy/food/src/screens/ResultsShowScreen.js"],"names":["React","useState","useEffect","yelp","ResultsShowScreen","navigation","result","setResult","id","getParam","getResult","get","response","data","console","log","name","photos","photo","item","styles","StyleSheet","create"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;;;;;AAEA,OAAOC,IAAP;;AACA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,OAAkB;AAAA,MAAhBC,UAAgB,QAAhBA,UAAgB;;AAAA,kBACZJ,QAAQ,CAAC,IAAD,CADI;AAAA;AAAA,MACjCK,MADiC;AAAA,MACzBC,SADyB;;AAExC,MAAMC,EAAE,GAAGH,UAAU,CAACI,QAAX,CAAoB,IAApB,CAAX;;AAEA,MAAMC,SAAS,GAAG,SAAZA,SAAY,CAAOF,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACSL,IAAI,CAACQ,GAAL,OAAaH,EAAb,CADT;;AAAA;AACRI,YAAAA,QADQ;AAEdL,YAAAA,SAAS,CAACK,QAAQ,CAACC,IAAV,CAAT;;AAFc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAKAX,EAAAA,SAAS,CAAC,YAAM;AACZQ,IAAAA,SAAS,CAACF,EAAD,CAAT;AACF,GAFO,EAEL,EAFK,CAAT;;AAIC,MAAI,CAACF,MAAL,EAAY;AACR,WAAO,IAAP;AACH;;AAEFQ,EAAAA,OAAO,CAACC,GAAR,CAAYP,EAAZ;AACA,SAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACH,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOF,MAAM,CAACU,IAAd,CADG,EAEH,oBAAC,QAAD;AACI,IAAA,IAAI,EAAEV,MAAM,CAACW,MADjB;AAEI,IAAA,YAAY,EAAE,sBAACC,KAAD;AAAA,aAAWA,KAAX;AAAA,KAFlB;AAGI,IAAA,UAAU,EAAG;AAACC,MAAAA,IAAI,EAAJA;AAAD,KAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFG,CAAP;AAOH,CAzBD;;AA2BA,IAAMC,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB,EAAlB,CAAf;AAEA,eAAelB,iBAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {View, Text, StyleSheet, FlatList} from 'react-native';\nimport yelp from '../api/yelp';\nconst ResultsShowScreen = ({navigation}) => {\n    const [result, setResult] = useState(null);\n    const id = navigation.getParam('id');\n\n    const getResult = async (id) => {\n        const response = await yelp.get(`/${id}`);\n        setResult(response.data);\n    }\n\n    useEffect(() => {\n        getResult(id);\n     }, []);\n\n     if (!result){\n         return null;\n     }\n\n    console.log(id);\n    return <View>\n        <Text>{result.name}</Text>\n        <FlatList\n            data={result.photos}\n            keyExtractor={(photo) => photo}\n            renderItem={({item})} />\n    </View>\n}\n\nconst styles = StyleSheet.create({})\n\nexport default ResultsShowScreen;"]},"metadata":{},"sourceType":"module"}